### [Cambio 1] - Secuencial
**Descripción breve:** Creación de la página de inicio (Landing Page).
**Detalles:** Se diseñó y desarrolló la página principal del sitio, accesible en la ruta `/`. Esta página sirve como la primera impresión para los visitantes y contiene secciones clave como un "Hero Section" con un llamado a la acción, una sección de bienvenida, un carrusel de programas académicos y un pie de página con información de contacto y redes sociales. Se implementó un diseño responsivo, incluyendo un menú de navegación adaptable para dispositivos móviles.

### [Cambio 2] - Secuencial
**Descripción breve:** Implementación del formulario de inicio de sesión.
**Detalles:** Se creó la página de inicio de sesión en `/login`. El formulario incluye campos para correo electrónico y contraseña, con validación en el lado del cliente usando Zod y React Hook Form. Se añadió la funcionalidad de "mostrar/ocultar contraseña". La página se conecta al endpoint `/api/login` para autenticar a los usuarios. Se incluyeron usuarios de prueba para cada rol (`admin@example.com`, `gestor@example.com`, etc.) para facilitar el acceso durante el desarrollo.

### [Cambio 3] - Secuencial
**Descripción breve:** Implementación de la recuperación de contraseña.
**Detalles:** Se desarrollaron dos páginas para el flujo de recuperación de contraseña: `/forgot-password` para solicitar el enlace de reseteo y `/reset-password` para establecer una nueva contraseña. Se crearon los endpoints de backend correspondientes (`/api/request-reset-password` y `/api/reset-password`) que gestionan la generación de tokens, el envío de correos (simulado a través de Nodemailer) y la actualización de la contraseña en la base de datos de Firebase.

### [Cambio 4] - Secuencial
**Descripción breve:** Creación del formulario de registro de múltiples pasos.
**Detalles:** Se desarrolló la página de registro en `/register` como un formulario de múltiples pasos para mejorar la experiencia del usuario. Cada paso tiene su propio esquema de validación con Zod. Los pasos incluyen: datos personales, datos de contacto, inscripción académica, selección de materias, datos de acceso y método de pago. La lógica de navegación entre pasos valida los campos antes de permitir avanzar. El formulario se conecta al endpoint `/api/register-user` para crear el nuevo usuario en Firestore.

### [Cambio 5] - Secuencial
**Descripción breve:** Implementación de la lógica de selección de materias en el registro.
**Detalles:** Se añadió un nuevo paso al formulario de registro para la selección de materias. El sistema asigna automáticamente las materias obligatorias del ciclo seleccionado por el estudiante. Si el ciclo contiene materias electivas, se presenta una lista para que el estudiante elija. Se implementó una validación en tiempo real para asegurar que la suma de los créditos de las materias seleccionadas sea exactamente 10 antes de permitir continuar.

### [Cambio 6] - Secuencial
**Descripción breve:** Desarrollo de la API de autenticación y registro.
**Detalles:** Se crearon los endpoints de backend para gestionar la autenticación y el registro de usuarios.
- `/api/login`: Valida las credenciales del usuario contra los datos en Firestore, usando `bcrypt` para comparar contraseñas cifradas. Devuelve los datos del usuario y su rol si el inicio de sesión es exitoso.
- `/api/register-user`: Recibe los datos del formulario de registro, genera un correo institucional único, cifra la contraseña con `bcrypt` y crea los documentos correspondientes en las colecciones `usuarios` y `estudiantes` de Firestore.

### [Cambio 7] - Secuencial
**Descripción breve:** Creación del Layout del Dashboard.
**Detalles:** Se diseñó el layout principal para todas las páginas del dashboard (`/dashboard/layout.tsx`). Este layout incluye una barra lateral de navegación persistente y un encabezado. La barra lateral es personalizable, responsive y colapsable. El encabezado contiene un buscador, un menú de notificaciones y un menú de perfil de usuario con opciones como "Perfil", "Configuración" y "Cerrar Sesión".

### [Cambio 8] - Secuencial
**Descripción breve:** Implementación de la redirección basada en roles.
**Detalles:** Se creó una página de redirección en `/dashboard/page.tsx`. Esta página verifica el rol del usuario guardado en el `localStorage` después del inicio de sesión y redirige automáticamente al panel de control correspondiente (`/dashboard/admin`, `/dashboard/gestor`, `/dashboard/docente` o `/dashboard/estudiante`), asegurando que cada usuario vea la interfaz adecuada para su rol.

### [Cambio 9] - Secuencial
**Descripción breve:** Desarrollo del panel de Estudiante.
**Detalles:** Se crearon varias páginas para el rol de estudiante:
- **Panel Principal (`/dashboard/estudiante`):** Muestra un resumen de las materias actuales, una lista de tareas pendientes y un calendario académico interactivo.
- **Materias (`/dashboard/materias`):** Permite ver las materias inscritas en formato de cuadrícula o lista, con filtros y opciones de ordenamiento.
- **Calificaciones (`/dashboard/calificaciones`):** Muestra las notas por materia, el promedio general ponderado y el total de créditos aprobados. Incluye un desglose de notas por actividad.
- **Horario (`/dashboard/horarios`):** Presenta el horario de clases en una vista de calendario semanal.
- **Asistencias (`/dashboard/asistencias`):** Permite al estudiante consultar su historial de asistencias y faltas.
- **Pagos (`/dashboard/pagos`):** Muestra el historial de transacciones y el saldo pendiente.
- **Evaluación Docente (`/dashboard/evaluacion-docente`):** Permite al estudiante calificar a sus docentes.
- **Perfil (`/dashboard/profile`):** Permite al usuario ver y actualizar su información personal y cambiar su contraseña.

### [Cambio 10] - Secuencial
**Descripción breve:** Desarrollo del panel de Docente.
**Detalles:** Se crearon varias páginas para el rol de docente:
- **Panel Principal (`/dashboard/docente`):** Proporciona accesos directos a las principales herramientas del docente.
- **Mis Grupos (`/dashboard/docente/grupos`):** Permite al docente ver los grupos que tiene asignados y la lista de estudiantes inscritos en cada uno.
- **Registrar Notas (`/dashboard/docente/notas`):** Un formulario para que el docente seleccione un grupo y un estudiante para registrar su calificación final.
- **Tomar Asistencia (`/dashboard/docente/asistencia`):** Una interfaz para pasar lista y registrar la asistencia de los estudiantes de un grupo seleccionado.

### [Cambio 11] - Secuencial
**Descripción breve:** Desarrollo del panel de Administrador.
**Detalles:** Se creó la página del panel de administrador en `/dashboard/admin`. Esta interfaz incluye un resumen de estadísticas del sistema (usuarios, carreras, etc.) y herramientas para la gestión de datos iniciales. Se añadieron botones para ejecutar los endpoints de "seeding" (`/api/seed/carrera` y `/api/seed/grupos`) para poblar la base de datos con datos de prueba.

### [Cambio 12] - Secuencial
**Descripción breve:** Desarrollo del panel de Gestor.
**Detalles:** Se creó la página del panel de gestor en `/dashboard/gestor`. Esta página proporciona una interfaz con accesos directos a las funciones de gestión académica, como la administración de carreras, la gestión de grupos y la revisión de pagos.

### [Cambio 13] - Secuencial
**Descripción breve:** Creación de endpoints de "seeding".
**Detalles:** Se implementaron los endpoints `/api/seed/carrera` y `/api/seed/grupos` para poblar la base de datos de Firestore con datos iniciales. Estos endpoints verifican si los datos ya existen para evitar duplicados y facilitan la configuración inicial del entorno de desarrollo.

### [Cambio 14] - Secuencial
**Descripción breve:** Implementación de flujos de IA con Genkit.
**Detalles:** Se crearon dos flujos de IA utilizando Genkit:
- **Sugerencia de Contenido (`/ai/flows/suggest-content.ts`):** Un agente que sugiere contenido y enlaces de navegación relevantes basándose en la actividad simulada del usuario.
- **Envío de Código de Verificación (`/ai/flows/send-verification-code.ts`):** Un flujo que genera un correo electrónico en formato HTML con un código de verificación para el proceso de recuperación de contraseña.

### [Cambio 15] - Secuencial
**Descripción breve:** Corrección de error `PageNotFoundError`.
**Detalles:** Se solucionó un `PageNotFoundError` que ocurría debido a una estructura de carpetas incorrecta para la ruta `/register`. El archivo `register/page.tsx` fue movido a la ubicación correcta `src/app/register/page.tsx`, alineándolo con las convenciones del App Router de Next.js.

### [Cambio 16] - Secuencial
**Descripción breve:** Corrección de error de `shape` indefinido en Zod.
**Detalles:** Se resolvió un error de runtime `Cannot read properties of undefined (reading 'shape')` en el formulario de registro. El problema se debía a un intento de acceder a la propiedad `_def.schema.shape` en esquemas de Zod. Se corrigió utilizando la propiedad `.shape` directamente, que es la forma correcta de combinar esquemas de objetos.

### [Cambio 17] - Secuencial
**Descripción breve:** Corrección de error `Cannot convert undefined or null to object`.
**Detalles:** Se solucionó un error de runtime en el formulario de registro que ocurría al intentar acceder a la propiedad `.shape` de un esquema de Zod modificado con `.refine()`. Se refactorizó la lógica para separar la definición del objeto base del esquema de la validación con `.refine()`, asegurando que la propiedad `.shape` estuviera disponible cuando se necesitaba.

### [Cambio 18] - Secuencial
**Descripción breve:** Corrección de error "datos de entrada inválidos" en el registro.
**Detalles:** Se solucionó un error persistente de "datos de entrada inválidos" al finalizar el registro. Después de varios intentos, se identificó que el problema no estaba en la validación de entrada, sino en la lógica de negocio del backend. El campo `segundoNombre`, al llegar como una cadena vacía, causaba un fallo al intentar usarlo para generar el correo institucional. Se ajustó la lógica en `/api/register-user/route.ts` para manejar correctamente el caso en que `segundoNombre` esté vacío, omitiéndolo de la construcción del correo y permitiendo que el registro se complete con éxito.
